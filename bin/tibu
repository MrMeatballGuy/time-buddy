#! ruby
require 'csv'
require 'time'
require 'optparse'
require 'fileutils'

class TimeUtil
  def self.prettify_time(hour, minute)
    "#{'%02d' % (hour)}:#{'%02d' % (minute)}"
  end

  def self.minutes_to_time_str(minutes)
    hours = (minutes / 60).floor
    TimeUtil.prettify_time(hours, minutes - (60 * hours))
  end

  def self.difference_in_minutes(from, to)
    from_time = Time.parse(from)
    to_time = Time.parse(to)
    minutes = (to_time - from_time) / 60
    raise "Start time can't be after end time" if minutes.negative?
    raise "Start time can't be equal to end time" if minutes == 0
    minutes
  end
end

class DataUtil
  def self.read_data(path)
    begin
      data = CSV.read(File.absolute_path(path, Dir.pwd))
    rescue StandardError
      raise "File does not exist or it is invalid"
    end
    data
  end

  def self.map_data(data)
    result = {}
    data.each do |row|
      raise "A task identifier must be present in the third column in all rows" if row[2].nil?
      raise "A start time and end time must be present in the first and second column of all rows" if row[0].nil? || row[1].nil?
      identifier = row[2].strip.upcase
      from = row[0].strip.split(":").map{|str| str.to_i}
      to = row[1].strip.split(":").map{|str| str.to_i}

      result[identifier] ||= []
      result[identifier] << {
        from: TimeUtil.prettify_time(from[0], from[1]),
        to: TimeUtil.prettify_time(to[0], to[1]),
        minutes: TimeUtil.difference_in_minutes(row[0], row[1])
      }
    end
    result.sort.to_h
  end
end

class OutputUtil
  def self.generate_output(data)
    total_minutes = 0

    output = []
    output << "\n[Time]"
    data.each do |identifier, time_info|
      current_minutes = time_info.sum { |h| h[:minutes] }
      total_minutes = total_minutes + current_minutes
      output << "#{identifier} | #{TimeUtil.minutes_to_time_str(current_minutes)}"
      time_info.each do |info|
        output << "  #{info[:from]} - #{info[:to]} | #{TimeUtil.minutes_to_time_str(info[:minutes])}"
      end
      output << "\n"
    end

    output << "Total time: #{TimeUtil.minutes_to_time_str(total_minutes)}"
  end

  def self.render(file_path)
    OutputUtil.generate_output(
      DataUtil.map_data(
        DataUtil.read_data(file_path)
      )
    ).each { |str| puts str }
  end
end

begin
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: tibu [options] [file.csv]"

    opts.on("-c", "--commit", "Commit time to history") do |c|
      options[:commit] = c
    end
  end.parse!

  OutputUtil.render(ARGV[0])

  if options[:commit]
    history_path = "#{Dir.home}/.tibu/history"
    FileUtils.mkdir_p(history_path)
    FileUtils.cp(File.absolute_path(ARGV[0], Dir.pwd), "#{history_path}/#{DateTime.now.strftime('%Y-%m-%d')}.csv")
  end
rescue StandardError => e
  STDERR.puts "\e[31m#{e.message}\e[0m"
end
